{"version":3,"file":"static/js/543.f099fff4.chunk.js","mappings":"0RA8CA,MAzCC,YAAgC,IAAZA,EAAW,EAAXA,SACnB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAYA,OAEE,iCACI,kBAAOH,SAZO,SAAAI,GAEnB,GADAA,EAAEC,iBACmB,KAAjBH,EAAMI,OACP,OAAOC,EAAAA,GAAAA,MAAY,0BAErBP,EAASE,EAAMM,eACfL,EAAS,GACV,EAKK,WACE,mBAAQM,KAAK,SAAb,UACE,2BAAO,SAAC,MAAD,SAGR,kBACCA,KAAK,OACLC,KAAK,SACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,SAzBS,SAAAV,GAAC,OAAID,EAASC,EAAEW,cAAcC,MAA7B,EA0BVA,MAAOd,QAGT,SAAC,KAAD,MAGT,E,oBC8BD,MA7DA,WAAmB,IAAD,EACRe,GAAWC,EAAAA,EAAAA,MACjB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA2BpB,EAAAA,EAAAA,UAAS,IAApC,eAAOqB,EAAP,KAAeC,EAAf,KACA,GAA4BtB,EAAAA,EAAAA,UAAS,QAArC,eAAOuB,EAAP,KAAeC,EAAf,KACMvB,EAAK,UAAGkB,EAAaM,IAAI,gBAApB,QAA+B,GAkC1C,OAhCJC,EAAAA,EAAAA,YAAU,WACL,GAAc,KAAVzB,EAAJ,CAKD,IAAM0B,EAAS,mCAAG,sGAEdH,EAAU,WAFI,UAGYI,EAAAA,EAAAA,IAAgB3B,GAH5B,gBAIS,KADf4B,EAHM,EAGNA,SACIC,QACVxB,EAAAA,GAAAA,MACE,2EAGJgB,EAAUO,GACVL,EAAU,YAVI,kDAaflB,EAAAA,GAAAA,MAAY,iDACXkB,EAAU,QAdI,0DAAH,qDAiBdG,GAnBA,MAFCH,EAAU,OAuBX,GAAE,CAACvB,KAQJ,iCACG,SAAC,EAAD,CAAYF,SANM,SAAAE,GACrBmB,EAAiB,CAAEnB,MAAOA,GACzB,KAMO,+BACKoB,QADL,IACKA,OADL,EACKA,EAAQU,KAAI,SAAAC,GAAK,OACtB,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMpB,GAAhD,SACGgB,EAAMK,SAFFL,EAAME,GADO,MASV,YAAXX,IAAwB,SAACe,EAAA,EAAD,KACzB,SAAC,KAAD,MAKX,C,mMClEKC,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAiB,mCAAG,oGACRD,EAAAA,EAAAA,IAAA,qCAAwCD,IADhC,cACzBG,EADyB,yBAExBA,EAASC,MAFe,2CAAH,qDAKjBf,EAAe,mCAAG,WAAO3B,GAAP,uFACJuC,EAAAA,EAAAA,IAAA,+BAAkCD,EAAlC,iCAAkEtC,EAAlE,gCADI,cACrByC,EADqB,yBAEtBA,EAASC,MAFa,2CAAH,sDAKfC,EAAY,mCAAG,WAAOV,GAAP,uFACAM,EAAAA,EAAAA,IAAA,gBAAmBN,EAAnB,oBAAiCK,EAAjC,oBADA,cACjBG,EADiB,yBAEjBA,EAASC,MAFQ,2CAAH,sDAKZE,EAAe,mCAAG,WAAOX,GAAP,uFACHM,EAAAA,EAAAA,IAAA,gBAAmBN,EAAnB,4BAAyCK,EAAzC,oBADG,cACpBG,EADoB,yBAEpBA,EAASC,MAFW,2CAAH,sDAKfG,EAAe,mCAAG,WAAOZ,GAAP,uFACHM,EAAAA,EAAAA,IAAA,gBAAmBN,EAAnB,4BAAyCK,EAAzC,2BADG,cACpBG,EADoB,yBAEpBA,EAASC,MAFW,2CAAH,qD","sources":["components/SearchBar/SearchBar.jsx","Pages/Movies/Movies.jsx","api.js"],"sourcesContent":["import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FiSearch } from 'react-icons/fi';\nimport toast, { Toaster } from 'react-hot-toast';\n\n function SearchBar({onSubmit}) {\n  const [query, setQuery] = useState('');\n const inputChange = e => setQuery(e.currentTarget.value);\n  \n const handleSubmit = e => {\n   e.preventDefault();\n   if (query.trim() === '') {\n      return toast.error('Please enter something');\n    }\n    onSubmit(query.toLowerCase());\n    setQuery('');\n  };\n\n  return (\n\n    < >\n        <form  onSubmit={handleSubmit}>\n          <button type=\"submit\" >\n            <span ><FiSearch/></span>\n           </button>\n\n           <input \n            type=\"text\"\n            name=\"search\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movies\"\n            onChange={inputChange}\n            value={query}\n          />\n        </form>\n          <Toaster />\n      </>\n  )\n}\n\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;","import { useState, useEffect } from 'react';\nimport { useSearchParams, Link, useLocation } from 'react-router-dom';\nimport toast, { Toaster } from 'react-hot-toast';\nimport SearchBar from 'components/SearchBar/SearchBar';\nimport { getSearchMovies } from 'api';\nimport Loader from 'components/Loader/Loader';\n\n\nfunction Movies() {\n    const location = useLocation();\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [movies, setMovie] = useState([]);\n    const [status, setStatus] = useState('idle');\n    const query = searchParams.get('query')?? '';;\n\nuseEffect(() => {\n     if (query === '') {\n      setStatus('idle');\n      return;\n    }\n  \n    const fetchData = async () => {\n      try {\n        setStatus('loading');\n        const { results } = await getSearchMovies(query);\n        if (results.length === 0) {\n          toast.error(\n            'Sorry, there are no films matching your search query. Please try again.'\n          );\n        }\n        setMovie( results);\n        setStatus('finished');\n      }\n      catch (error) {\n       toast.error('Oops! Something went wrong! Please try again.');\n        setStatus('idle');\n      }\n    }\n     fetchData();\n    \n    }, [query]);\n    \n\n    const changeFilter = query => {\n    setSearchParams( { query: query });\n    };\n    \n    return (\n    <>\n       <SearchBar  onSubmit={changeFilter} />\n            \n            <ul>\n                {movies?.map(movie => (\n            <li key={movie.id}>\n              <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                {movie.title}\n                        </Link>\n                        </li>\n          ))}\n    \n            </ul>\n            {status === 'loading' && <Loader />}\n            <Toaster />\n            \n        \n    </>\n  )\n};\n\nexport default Movies;\n","import axios from 'axios';\nconst API_KEY = 'c44487c03ffebabedae8b57076099ca1';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const getSearchMovies = async (query) =>{\n    const response = await axios.get(`search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`);\n  return response.data;\n}\n\nexport const getMovieById = async (id) => {\n     const response = await axios.get(`movie/${id}?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n}\n  \nexport const getMovieCredits = async (id) => {\n     const response = await axios.get(`movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n}\n\nexport const getMovieReviews = async (id) => {\n     const response = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n    return response.data;\n}\n\n"],"names":["onSubmit","useState","query","setQuery","e","preventDefault","trim","toast","toLowerCase","type","name","autoComplete","autoFocus","placeholder","onChange","currentTarget","value","location","useLocation","useSearchParams","searchParams","setSearchParams","movies","setMovie","status","setStatus","get","useEffect","fetchData","getSearchMovies","results","length","map","movie","to","id","state","from","title","Loader","API_KEY","axios","getTrendingMovies","response","data","getMovieById","getMovieCredits","getMovieReviews"],"sourceRoot":""}