{"version":3,"file":"static/js/387.7816fe36.chunk.js","mappings":"mTACMA,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAiB,mCAAG,oGACRD,EAAAA,EAAAA,IAAA,qCAAwCD,IADhC,cACzBG,EADyB,yBAExBA,EAASC,MAFe,2CAAH,qDAKjBC,EAAe,mCAAG,WAAOC,GAAP,uFACJL,EAAAA,EAAAA,IAAA,+BAAkCD,EAAlC,iCAAkEM,EAAlE,gCADI,cACrBH,EADqB,yBAEtBA,EAASC,MAFa,2CAAH,sDAKfG,EAAY,mCAAG,WAAOC,GAAP,uFACAP,EAAAA,EAAAA,IAAA,gBAAmBO,EAAnB,oBAAiCR,EAAjC,oBADA,cACjBG,EADiB,yBAEjBA,EAASC,MAFQ,2CAAH,sDAKZK,EAAe,mCAAG,WAAOD,GAAP,uFACHP,EAAAA,EAAAA,IAAA,gBAAmBO,EAAnB,4BAAyCR,EAAzC,oBADG,cACpBG,EADoB,yBAEpBA,EAASC,MAFW,2CAAH,sDAKfM,EAAe,mCAAG,WAAOF,GAAP,uFACHP,EAAAA,EAAAA,IAAA,gBAAmBO,EAAnB,4BAAyCR,EAAzC,2BADG,cACpBG,EADoB,yBAEpBA,EAASC,MAFW,2CAAH,qD,8LCtBfO,EAAQC,EAAAA,GAAAA,IAAH,4EAKJC,EAAYD,EAAAA,GAAAA,GAAH,gHAQVE,EAAYF,EAAAA,GAAAA,GAAH,6DAITG,EAAWH,EAAAA,GAAAA,EAAH,mEAKRI,EAAYJ,EAAAA,GAAAA,GAAH,+C,SC4CtB,EA3Da,WACX,IAAQJ,GAAOS,EAAAA,EAAAA,MAAPT,GACR,GAA4BU,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4BF,EAAAA,EAAAA,UAAS,QAArC,eAAOG,EAAP,KAAeC,EAAf,MAGAC,EAAAA,EAAAA,YAAU,WAAM,wCAEf,oGAEKD,EAAU,WAFf,UAG0Bb,EAAAA,EAAAA,IAAgBD,GAH1C,OAGWgB,EAHX,OAIKJ,EAAUI,GACVF,EAAU,YALf,gDAQIG,EAAAA,GAAAA,MAAY,iDACXH,EAAU,QATf,0DAFe,uBAAC,WAAD,wBAcbI,EACF,GAAE,CAAClB,IAEJ,IAAQmB,EAAQR,EAARQ,KAEN,OACG,+BACAA,GAAQA,EAAKC,OAAS,GACrB,SAACf,EAAD,UACGc,EAAKE,KAAI,YAA4C,IAAzCrB,EAAwC,EAAxCA,GAAIsB,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACnC,OACE,UAAClB,EAAD,YACE,0BACE,SAACH,EAAD,CACEsB,IACEH,EAAY,UArCb,mCAqCa,OACUA,GAClB,0EAENI,IAAI,aAGR,SAAClB,EAAD,UAAYe,KACZ,SAAChB,EAAD,UAAWiB,MAZGxB,EAenB,OAGH,mFAEU,YAAXa,IAAwB,SAACc,EAAA,EAAD,KACtB,SAAC,KAAD,MAGR,C","sources":["api.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = 'c44487c03ffebabedae8b57076099ca1';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const getSearchMovies = async (query) =>{\n    const response = await axios.get(`search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`);\n  return response.data;\n}\n\nexport const getMovieById = async (id) => {\n     const response = await axios.get(`movie/${id}?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n}\n  \nexport const getMovieCredits = async (id) => {\n     const response = await axios.get(`movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n}\n\nexport const getMovieReviews = async (id) => {\n     const response = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n    return response.data;\n}\n\n","import styled from 'styled-components';\n\nexport const Image = styled.img`\nborder-radius: 40%;\n width: 160px;\n height: 200px;`\n\n export const ActorList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  gap: 30px;\n  \n`;\n\nexport const ActorItem = styled.li`\nlist-style-type: none;\nwidth: 160px;`\n\nexport const CastInfo = styled.p`\ntext-align: center;\nfont-style: oblique;\n`\n\nexport const ActorName = styled.h3`\ntext-align: center;\n\n`","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from 'api';\nimport Loader from 'components/Loader/Loader';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { Image, ActorList, CastInfo, ActorItem, ActorName } from './Cast.styled';\n\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nconst Cast = () => {\n  const { id } = useParams();\n  const [credit, setCredit] = useState([]);\n  const [status, setStatus] = useState('idle');\n  \n  \n  useEffect(() => {\n  \n   async function getCast() {\n      try {\n        setStatus('loading');\n        const result = await getMovieCredits(id);\n        setCredit(result);\n        setStatus('finished');\n      }\n      catch (error) {\n       toast.error('Oops! Something went wrong! Please try again.');\n        setStatus('idle');\n      }\n    }\n     getCast();\n  }, [id]);\n\n  const { cast} = credit;\n\n    return (\n       <section>\n      {cast && cast.length > 0 ? (\n        <ActorList>\n          {cast.map(({ id, profile_path, name, character }) => {\n            return (\n              <ActorItem key={id}>\n                <div>\n                  <Image\n                    src={\n                      profile_path\n                        ? `${BASE_IMG_URL}${profile_path}`\n                        : 'https://i.pinimg.com/736x/f5/27/41/f52741fb62bf1d821948a49204406bdc.jpg'\n                    }\n                    alt=\"Actor\"\n                  />\n                </div>\n                <ActorName>{name}</ActorName>\n                <CastInfo>{character}</CastInfo>\n              </ActorItem>\n            );\n          })}\n        </ActorList>\n      ) : (\n        <div>We don't have information about cast for this movies.</div>\n      )}\n      {status === 'loading' && <Loader />}\n         <Toaster />\n    </section>\n  );\n};\n\n\n\nexport default Cast;"],"names":["API_KEY","axios","getTrendingMovies","response","data","getSearchMovies","query","getMovieById","id","getMovieCredits","getMovieReviews","Image","styled","ActorList","ActorItem","CastInfo","ActorName","useParams","useState","credit","setCredit","status","setStatus","useEffect","result","toast","getCast","cast","length","map","profile_path","name","character","src","alt","Loader"],"sourceRoot":""}